import { ConstraintExtend, Constraints, ERRO, ZegoDataReport, ZegoLogger, ZReporter } from "../common/zego.entity";
export declare function checkIllegalCharacters(str: string): boolean;
export declare function isUrl(str: string): boolean;
export declare function registerCallback(fName: string, option: {
    success?: Function;
    error?: Function;
}, callbackList: {
    [index: string]: Function;
}): void;
export declare function actionErrorCallback(fName: string, callbackList: {
    [index: string]: Function;
}): Function;
export declare function actionSuccessCallback(fName: string, callbackList: {
    [index: string]: Function;
}): Function;
export declare function dataReportEvent(dataReport: ZegoDataReport, reportSeq: number, reportName: string, eventName: string, args: any): void;
export declare function logReportCallback(logEvent: string, dataReport: ZegoDataReport, reportSeq: number, callbackList: {
    [index: string]: Function;
}): void;
export declare function actionLogReportCallback(logEvent: string, callbackList: {
    [index: string]: Function;
}, reportAction: string, eventName: string, args?: any): void;
export declare function getServerError(code: number, useNetAgent?: boolean, msg?: string): ERRO;
export declare function unregisterCallback(fName: string, callbackList: {
    [index: string]: Function;
}): void;
export declare function decodeServerError(code: number, msg: string): {
    code: number;
    message: string;
};
export declare function getLiveRoomError(code: number, useNetAgent?: boolean): string;
export declare function getKickoutError(code: number): any;
export declare function isKeepTryLogin(code: number): boolean;
export declare function mergeStreamList(idName: string, oldStreamList: any[], newStreamList: any[], callbackResult: {
    (addStreamList: any[], delStreamList: any[], updateStreamList: any[], updateAttrStreamList: any[]): void;
}): void;
export declare function checkInteger(num: number | undefined, positive?: boolean): boolean;
export declare function checkValidNumber(param: number, min?: number, max?: number): boolean;
export declare function uuid(len?: number, radix?: number): string;
export declare function getPublisherStateType(type: 0 | 1 | 2): string;
export declare function getPlayerStateType(type: 0 | 1 | 2): string;
export declare function getSteamUpdateType(type: 0 | 1): string;
export declare function checkConstraintExtendWithMessage(constraintExtend: ConstraintExtend, param: string, limitMin?: number, // 每个参数限制的最小值
limitMax?: number): {
    result: boolean;
    message: string;
};
export declare function checkConstraintExtend(constraintExtend: ConstraintExtend, param: string, errorCallback?: Function, // for createStream
limitMin?: number, // 每个参数限制的最小值（正整数）
limitMax?: number): boolean;
export declare function checkParamsWithConstraintExtend(constraints: {
    width?: number | ConstraintExtend;
    height?: number | ConstraintExtend;
    frameRate?: number | ConstraintExtend;
}, errorCallback?: Function): boolean;
export declare function checkBitRateLimit(bitRateValue: number, errorCallback: Function): boolean;
export declare function checkCameraOrScreenBitRate(bitRate: number | undefined, errorCallback: Function): boolean;
export declare function checkScreenParams(screen: Constraints["screen"], errorCallback: Function): boolean;
export declare function isParamEmpty(param: any): boolean;
export declare function isTooLong(param: string, len: number): boolean;
export declare function isReDispatch(error: ERRO): boolean;
export declare function arrAvg(arr: Array<number>, val: any, shiftLen: number): any;
export declare function calcQualityOfRtt(rtt: number): number;
export declare function calcQualityOfJitter(jitter: number): number;
export declare function calcQualityOfLostRate(lostRate: number, isProbe: boolean): number;
export declare function getNetQuality(rtt: number, lostRate: number, jitter?: number): number;
export declare function quality2QualityGrade(quality: number): number;
export declare function isSupportEncodedTransforms(): boolean;
export declare function isSupportTransceiver(): boolean;
export declare function isSupportConfiguration(): boolean;
export declare function uint8arrayToBase64(u8Arr: Uint8Array): string;
export declare function getStreamTracksStatus(stream: MediaStream): string;
export declare function logTrackStatus(track: MediaStreamTrack, _zgp_logger: ZegoLogger, action: string): void;
/**
 * 浅拷贝，排除部分Key，拷贝源
 * @param sourceObject 源
 * @param excludeKeys 排除的Key
 * @returns
 */
export declare function assignPartialObject(sourceObject: Record<string, any>, excludeKeys: string[]): Record<string, any>;
export declare function generaStreamSid(appID: number, userID: string, streamID: string): number;
export declare function getBitCode(x: number, bit: number): number;
export declare function getSpan(reporter: ZReporter, level: number, par: string, spanName: string, parentKey: string, otherParentKey?: string, isMap?: boolean): any;
export declare function supplementPBInfo(body: any): void;
export declare function compareArrayBuffers(view1: Uint8Array, view2: Uint8Array): boolean;
