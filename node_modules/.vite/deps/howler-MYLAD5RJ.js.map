{
  "version": 3,
  "sources": ["../../howler/dist/howler.js"],
  "sourcesContent": ["/*!\r\n *  howler.js v2.2.4\r\n *  howlerjs.com\r\n *\r\n *  (c) 2013-2020, James Simpson of GoldFire Studios\r\n *  goldfirestudios.com\r\n *\r\n *  MIT License\r\n */\r\n\r\n(function() {\r\n\r\n  'use strict';\r\n\r\n  /** Global Methods **/\r\n  /***************************************************************************/\r\n\r\n  /**\r\n   * Create the global controller. All contained methods and properties apply\r\n   * to all sounds that are currently playing or will be in the future.\r\n   */\r\n  var HowlerGlobal = function() {\r\n    this.init();\r\n  };\r\n  HowlerGlobal.prototype = {\r\n    /**\r\n     * Initialize the global Howler object.\r\n     * @return {Howler}\r\n     */\r\n    init: function() {\r\n      var self = this || Howler;\r\n\r\n      // Create a global ID counter.\r\n      self._counter = 1000;\r\n\r\n      // Pool of unlocked HTML5 Audio objects.\r\n      self._html5AudioPool = [];\r\n      self.html5PoolSize = 10;\r\n\r\n      // Internal properties.\r\n      self._codecs = {};\r\n      self._howls = [];\r\n      self._muted = false;\r\n      self._volume = 1;\r\n      self._canPlayEvent = 'canplaythrough';\r\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\r\n\r\n      // Public properties.\r\n      self.masterGain = null;\r\n      self.noAudio = false;\r\n      self.usingWebAudio = true;\r\n      self.autoSuspend = true;\r\n      self.ctx = null;\r\n\r\n      // Set to false to disable the auto audio unlocker.\r\n      self.autoUnlock = true;\r\n\r\n      // Setup the various state values for global tracking.\r\n      self._setup();\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Get/set the global volume for all sounds.\r\n     * @param  {Float} vol Volume from 0.0 to 1.0.\r\n     * @return {Howler/Float}     Returns self or current volume.\r\n     */\r\n    volume: function(vol) {\r\n      var self = this || Howler;\r\n      vol = parseFloat(vol);\r\n\r\n      // If we don't have an AudioContext created yet, run the setup.\r\n      if (!self.ctx) {\r\n        setupAudioContext();\r\n      }\r\n\r\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\r\n        self._volume = vol;\r\n\r\n        // Don't update any of the nodes if we are muted.\r\n        if (self._muted) {\r\n          return self;\r\n        }\r\n\r\n        // When using Web Audio, we just need to adjust the master gain.\r\n        if (self.usingWebAudio) {\r\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\r\n        }\r\n\r\n        // Loop through and change volume for all HTML5 audio nodes.\r\n        for (var i=0; i<self._howls.length; i++) {\r\n          if (!self._howls[i]._webAudio) {\r\n            // Get all of the sounds in this Howl group.\r\n            var ids = self._howls[i]._getSoundIds();\r\n\r\n            // Loop through all sounds and change the volumes.\r\n            for (var j=0; j<ids.length; j++) {\r\n              var sound = self._howls[i]._soundById(ids[j]);\r\n\r\n              if (sound && sound._node) {\r\n                sound._node.volume = sound._volume * vol;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        return self;\r\n      }\r\n\r\n      return self._volume;\r\n    },\r\n\r\n    /**\r\n     * Handle muting and unmuting globally.\r\n     * @param  {Boolean} muted Is muted or not.\r\n     */\r\n    mute: function(muted) {\r\n      var self = this || Howler;\r\n\r\n      // If we don't have an AudioContext created yet, run the setup.\r\n      if (!self.ctx) {\r\n        setupAudioContext();\r\n      }\r\n\r\n      self._muted = muted;\r\n\r\n      // With Web Audio, we just need to mute the master gain.\r\n      if (self.usingWebAudio) {\r\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\r\n      }\r\n\r\n      // Loop through and mute all HTML5 Audio nodes.\r\n      for (var i=0; i<self._howls.length; i++) {\r\n        if (!self._howls[i]._webAudio) {\r\n          // Get all of the sounds in this Howl group.\r\n          var ids = self._howls[i]._getSoundIds();\r\n\r\n          // Loop through all sounds and mark the audio node as muted.\r\n          for (var j=0; j<ids.length; j++) {\r\n            var sound = self._howls[i]._soundById(ids[j]);\r\n\r\n            if (sound && sound._node) {\r\n              sound._node.muted = (muted) ? true : sound._muted;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Handle stopping all sounds globally.\r\n     */\r\n    stop: function() {\r\n      var self = this || Howler;\r\n\r\n      // Loop through all Howls and stop them.\r\n      for (var i=0; i<self._howls.length; i++) {\r\n        self._howls[i].stop();\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Unload and destroy all currently loaded Howl objects.\r\n     * @return {Howler}\r\n     */\r\n    unload: function() {\r\n      var self = this || Howler;\r\n\r\n      for (var i=self._howls.length-1; i>=0; i--) {\r\n        self._howls[i].unload();\r\n      }\r\n\r\n      // Create a new AudioContext to make sure it is fully reset.\r\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\r\n        self.ctx.close();\r\n        self.ctx = null;\r\n        setupAudioContext();\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Check for codec support of specific extension.\r\n     * @param  {String} ext Audio file extention.\r\n     * @return {Boolean}\r\n     */\r\n    codecs: function(ext) {\r\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\r\n    },\r\n\r\n    /**\r\n     * Setup various state values for global tracking.\r\n     * @return {Howler}\r\n     */\r\n    _setup: function() {\r\n      var self = this || Howler;\r\n\r\n      // Keeps track of the suspend/resume state of the AudioContext.\r\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\r\n\r\n      // Automatically begin the 30-second suspend process\r\n      self._autoSuspend();\r\n\r\n      // Check if audio is available.\r\n      if (!self.usingWebAudio) {\r\n        // No audio is available on this system if noAudio is set to true.\r\n        if (typeof Audio !== 'undefined') {\r\n          try {\r\n            var test = new Audio();\r\n\r\n            // Check if the canplaythrough event is available.\r\n            if (typeof test.oncanplaythrough === 'undefined') {\r\n              self._canPlayEvent = 'canplay';\r\n            }\r\n          } catch(e) {\r\n            self.noAudio = true;\r\n          }\r\n        } else {\r\n          self.noAudio = true;\r\n        }\r\n      }\r\n\r\n      // Test to make sure audio isn't disabled in Internet Explorer.\r\n      try {\r\n        var test = new Audio();\r\n        if (test.muted) {\r\n          self.noAudio = true;\r\n        }\r\n      } catch (e) {}\r\n\r\n      // Check for supported codecs.\r\n      if (!self.noAudio) {\r\n        self._setupCodecs();\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Check for browser support for various codecs and cache the results.\r\n     * @return {Howler}\r\n     */\r\n    _setupCodecs: function() {\r\n      var self = this || Howler;\r\n      var audioTest = null;\r\n\r\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\r\n      try {\r\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\r\n      } catch (err) {\r\n        return self;\r\n      }\r\n\r\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\r\n        return self;\r\n      }\r\n\r\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\r\n\r\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\r\n      var ua = self._navigator ? self._navigator.userAgent : '';\r\n      var checkOpera = ua.match(/OPR\\/(\\d+)/g);\r\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\r\n      var checkSafari = ua.indexOf('Safari') !== -1 && ua.indexOf('Chrome') === -1;\r\n      var safariVersion = ua.match(/Version\\/(.*?) /);\r\n      var isOldSafari = (checkSafari && safariVersion && parseInt(safariVersion[1], 10) < 15);\r\n\r\n      self._codecs = {\r\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\r\n        mpeg: !!mpegTest,\r\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\r\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\r\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\r\n        wav: !!(audioTest.canPlayType('audio/wav; codecs=\"1\"') || audioTest.canPlayType('audio/wav')).replace(/^no$/, ''),\r\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\r\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\r\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\r\n        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\r\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\r\n        weba: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\r\n        webm: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\r\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\r\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\r\n      };\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Some browsers/devices will only allow audio to be played after a user interaction.\r\n     * Attempt to automatically unlock audio on the first user interaction.\r\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\r\n     * @return {Howler}\r\n     */\r\n    _unlockAudio: function() {\r\n      var self = this || Howler;\r\n\r\n      // Only run this if Web Audio is supported and it hasn't already been unlocked.\r\n      if (self._audioUnlocked || !self.ctx) {\r\n        return;\r\n      }\r\n\r\n      self._audioUnlocked = false;\r\n      self.autoUnlock = false;\r\n\r\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\r\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\r\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\r\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\r\n        self._mobileUnloaded = true;\r\n        self.unload();\r\n      }\r\n\r\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\r\n      // http://stackoverflow.com/questions/24119684\r\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\r\n\r\n      // Call this method on touch start to create and play a buffer,\r\n      // then check if the audio actually played to determine if\r\n      // audio has now been unlocked on iOS, Android, etc.\r\n      var unlock = function(e) {\r\n        // Create a pool of unlocked HTML5 Audio objects that can\r\n        // be used for playing sounds without user interaction. HTML5\r\n        // Audio objects must be individually unlocked, as opposed\r\n        // to the WebAudio API which only needs a single activation.\r\n        // This must occur before WebAudio setup or the source.onended\r\n        // event will not fire.\r\n        while (self._html5AudioPool.length < self.html5PoolSize) {\r\n          try {\r\n            var audioNode = new Audio();\r\n\r\n            // Mark this Audio object as unlocked to ensure it can get returned\r\n            // to the unlocked pool when released.\r\n            audioNode._unlocked = true;\r\n\r\n            // Add the audio node to the pool.\r\n            self._releaseHtml5Audio(audioNode);\r\n          } catch (e) {\r\n            self.noAudio = true;\r\n            break;\r\n          }\r\n        }\r\n\r\n        // Loop through any assigned audio nodes and unlock them.\r\n        for (var i=0; i<self._howls.length; i++) {\r\n          if (!self._howls[i]._webAudio) {\r\n            // Get all of the sounds in this Howl group.\r\n            var ids = self._howls[i]._getSoundIds();\r\n\r\n            // Loop through all sounds and unlock the audio nodes.\r\n            for (var j=0; j<ids.length; j++) {\r\n              var sound = self._howls[i]._soundById(ids[j]);\r\n\r\n              if (sound && sound._node && !sound._node._unlocked) {\r\n                sound._node._unlocked = true;\r\n                sound._node.load();\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        // Fix Android can not play in suspend state.\r\n        self._autoResume();\r\n\r\n        // Create an empty buffer.\r\n        var source = self.ctx.createBufferSource();\r\n        source.buffer = self._scratchBuffer;\r\n        source.connect(self.ctx.destination);\r\n\r\n        // Play the empty buffer.\r\n        if (typeof source.start === 'undefined') {\r\n          source.noteOn(0);\r\n        } else {\r\n          source.start(0);\r\n        }\r\n\r\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\r\n        if (typeof self.ctx.resume === 'function') {\r\n          self.ctx.resume();\r\n        }\r\n\r\n        // Setup a timeout to check that we are unlocked on the next event loop.\r\n        source.onended = function() {\r\n          source.disconnect(0);\r\n\r\n          // Update the unlocked state and prevent this check from happening again.\r\n          self._audioUnlocked = true;\r\n\r\n          // Remove the touch start listener.\r\n          document.removeEventListener('touchstart', unlock, true);\r\n          document.removeEventListener('touchend', unlock, true);\r\n          document.removeEventListener('click', unlock, true);\r\n          document.removeEventListener('keydown', unlock, true);\r\n\r\n          // Let all sounds know that audio has been unlocked.\r\n          for (var i=0; i<self._howls.length; i++) {\r\n            self._howls[i]._emit('unlock');\r\n          }\r\n        };\r\n      };\r\n\r\n      // Setup a touch start listener to attempt an unlock in.\r\n      document.addEventListener('touchstart', unlock, true);\r\n      document.addEventListener('touchend', unlock, true);\r\n      document.addEventListener('click', unlock, true);\r\n      document.addEventListener('keydown', unlock, true);\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\r\n     * return a new Audio object and throw a warning.\r\n     * @return {Audio} HTML5 Audio object.\r\n     */\r\n    _obtainHtml5Audio: function() {\r\n      var self = this || Howler;\r\n\r\n      // Return the next object from the pool if one exists.\r\n      if (self._html5AudioPool.length) {\r\n        return self._html5AudioPool.pop();\r\n      }\r\n\r\n      //.Check if the audio is locked and throw a warning.\r\n      var testPlay = new Audio().play();\r\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\r\n        testPlay.catch(function() {\r\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\r\n        });\r\n      }\r\n\r\n      return new Audio();\r\n    },\r\n\r\n    /**\r\n     * Return an activated HTML5 Audio object to the pool.\r\n     * @return {Howler}\r\n     */\r\n    _releaseHtml5Audio: function(audio) {\r\n      var self = this || Howler;\r\n\r\n      // Don't add audio to the pool if we don't know if it has been unlocked.\r\n      if (audio._unlocked) {\r\n        self._html5AudioPool.push(audio);\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\r\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\r\n     * @return {Howler}\r\n     */\r\n    _autoSuspend: function() {\r\n      var self = this;\r\n\r\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\r\n        return;\r\n      }\r\n\r\n      // Check if any sounds are playing.\r\n      for (var i=0; i<self._howls.length; i++) {\r\n        if (self._howls[i]._webAudio) {\r\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\r\n            if (!self._howls[i]._sounds[j]._paused) {\r\n              return self;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (self._suspendTimer) {\r\n        clearTimeout(self._suspendTimer);\r\n      }\r\n\r\n      // If no sound has played after 30 seconds, suspend the context.\r\n      self._suspendTimer = setTimeout(function() {\r\n        if (!self.autoSuspend) {\r\n          return;\r\n        }\r\n\r\n        self._suspendTimer = null;\r\n        self.state = 'suspending';\r\n\r\n        // Handle updating the state of the audio context after suspending.\r\n        var handleSuspension = function() {\r\n          self.state = 'suspended';\r\n\r\n          if (self._resumeAfterSuspend) {\r\n            delete self._resumeAfterSuspend;\r\n            self._autoResume();\r\n          }\r\n        };\r\n\r\n        // Either the state gets suspended or it is interrupted.\r\n        // Either way, we need to update the state to suspended.\r\n        self.ctx.suspend().then(handleSuspension, handleSuspension);\r\n      }, 30000);\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\r\n     * @return {Howler}\r\n     */\r\n    _autoResume: function() {\r\n      var self = this;\r\n\r\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\r\n        return;\r\n      }\r\n\r\n      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {\r\n        clearTimeout(self._suspendTimer);\r\n        self._suspendTimer = null;\r\n      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {\r\n        self.ctx.resume().then(function() {\r\n          self.state = 'running';\r\n\r\n          // Emit to all Howls that the audio has resumed.\r\n          for (var i=0; i<self._howls.length; i++) {\r\n            self._howls[i]._emit('resume');\r\n          }\r\n        });\r\n\r\n        if (self._suspendTimer) {\r\n          clearTimeout(self._suspendTimer);\r\n          self._suspendTimer = null;\r\n        }\r\n      } else if (self.state === 'suspending') {\r\n        self._resumeAfterSuspend = true;\r\n      }\r\n\r\n      return self;\r\n    }\r\n  };\r\n\r\n  // Setup the global audio controller.\r\n  var Howler = new HowlerGlobal();\r\n\r\n  /** Group Methods **/\r\n  /***************************************************************************/\r\n\r\n  /**\r\n   * Create an audio group controller.\r\n   * @param {Object} o Passed in properties for this group.\r\n   */\r\n  var Howl = function(o) {\r\n    var self = this;\r\n\r\n    // Throw an error if no source is provided.\r\n    if (!o.src || o.src.length === 0) {\r\n      console.error('An array of source files must be passed with any new Howl.');\r\n      return;\r\n    }\r\n\r\n    self.init(o);\r\n  };\r\n  Howl.prototype = {\r\n    /**\r\n     * Initialize a new Howl group object.\r\n     * @param  {Object} o Passed in properties for this group.\r\n     * @return {Howl}\r\n     */\r\n    init: function(o) {\r\n      var self = this;\r\n\r\n      // If we don't have an AudioContext created yet, run the setup.\r\n      if (!Howler.ctx) {\r\n        setupAudioContext();\r\n      }\r\n\r\n      // Setup user-defined default properties.\r\n      self._autoplay = o.autoplay || false;\r\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\r\n      self._html5 = o.html5 || false;\r\n      self._muted = o.mute || false;\r\n      self._loop = o.loop || false;\r\n      self._pool = o.pool || 5;\r\n      self._preload = (typeof o.preload === 'boolean' || o.preload === 'metadata') ? o.preload : true;\r\n      self._rate = o.rate || 1;\r\n      self._sprite = o.sprite || {};\r\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\r\n      self._volume = o.volume !== undefined ? o.volume : 1;\r\n      self._xhr = {\r\n        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',\r\n        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\r\n        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false,\r\n      };\r\n\r\n      // Setup all other default properties.\r\n      self._duration = 0;\r\n      self._state = 'unloaded';\r\n      self._sounds = [];\r\n      self._endTimers = {};\r\n      self._queue = [];\r\n      self._playLock = false;\r\n\r\n      // Setup event listeners.\r\n      self._onend = o.onend ? [{fn: o.onend}] : [];\r\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\r\n      self._onload = o.onload ? [{fn: o.onload}] : [];\r\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\r\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\r\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\r\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\r\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\r\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\r\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\r\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\r\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\r\n      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];\r\n      self._onresume = [];\r\n\r\n      // Web Audio or HTML5 Audio?\r\n      self._webAudio = Howler.usingWebAudio && !self._html5;\r\n\r\n      // Automatically try to enable audio.\r\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\r\n        Howler._unlockAudio();\r\n      }\r\n\r\n      // Keep track of this Howl group in the global controller.\r\n      Howler._howls.push(self);\r\n\r\n      // If they selected autoplay, add a play event to the load queue.\r\n      if (self._autoplay) {\r\n        self._queue.push({\r\n          event: 'play',\r\n          action: function() {\r\n            self.play();\r\n          }\r\n        });\r\n      }\r\n\r\n      // Load the source file unless otherwise specified.\r\n      if (self._preload && self._preload !== 'none') {\r\n        self.load();\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Load the audio file.\r\n     * @return {Howler}\r\n     */\r\n    load: function() {\r\n      var self = this;\r\n      var url = null;\r\n\r\n      // If no audio is available, quit immediately.\r\n      if (Howler.noAudio) {\r\n        self._emit('loaderror', null, 'No audio support.');\r\n        return;\r\n      }\r\n\r\n      // Make sure our source is in an array.\r\n      if (typeof self._src === 'string') {\r\n        self._src = [self._src];\r\n      }\r\n\r\n      // Loop through the sources and pick the first one that is compatible.\r\n      for (var i=0; i<self._src.length; i++) {\r\n        var ext, str;\r\n\r\n        if (self._format && self._format[i]) {\r\n          // If an extension was specified, use that instead.\r\n          ext = self._format[i];\r\n        } else {\r\n          // Make sure the source is a string.\r\n          str = self._src[i];\r\n          if (typeof str !== 'string') {\r\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\r\n            continue;\r\n          }\r\n\r\n          // Extract the file extension from the URL or base64 data URI.\r\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\r\n          if (!ext) {\r\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\r\n          }\r\n\r\n          if (ext) {\r\n            ext = ext[1].toLowerCase();\r\n          }\r\n        }\r\n\r\n        // Log a warning if no extension was found.\r\n        if (!ext) {\r\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\r\n        }\r\n\r\n        // Check if this extension is available.\r\n        if (ext && Howler.codecs(ext)) {\r\n          url = self._src[i];\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (!url) {\r\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\r\n        return;\r\n      }\r\n\r\n      self._src = url;\r\n      self._state = 'loading';\r\n\r\n      // If the hosting page is HTTPS and the source isn't,\r\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\r\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\r\n        self._html5 = true;\r\n        self._webAudio = false;\r\n      }\r\n\r\n      // Create a new sound object and add it to the pool.\r\n      new Sound(self);\r\n\r\n      // Load and decode the audio data for playback.\r\n      if (self._webAudio) {\r\n        loadBuffer(self);\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Play a sound or resume previous playback.\r\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\r\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\r\n     * @return {Number}          Sound ID.\r\n     */\r\n    play: function(sprite, internal) {\r\n      var self = this;\r\n      var id = null;\r\n\r\n      // Determine if a sprite, sound id or nothing was passed\r\n      if (typeof sprite === 'number') {\r\n        id = sprite;\r\n        sprite = null;\r\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\r\n        // If the passed sprite doesn't exist, do nothing.\r\n        return null;\r\n      } else if (typeof sprite === 'undefined') {\r\n        // Use the default sound sprite (plays the full audio length).\r\n        sprite = '__default';\r\n\r\n        // Check if there is a single paused sound that isn't ended.\r\n        // If there is, play that sound. If not, continue as usual.\r\n        if (!self._playLock) {\r\n          var num = 0;\r\n          for (var i=0; i<self._sounds.length; i++) {\r\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\r\n              num++;\r\n              id = self._sounds[i]._id;\r\n            }\r\n          }\r\n\r\n          if (num === 1) {\r\n            sprite = null;\r\n          } else {\r\n            id = null;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Get the selected node, or get one from the pool.\r\n      var sound = id ? self._soundById(id) : self._inactiveSound();\r\n\r\n      // If the sound doesn't exist, do nothing.\r\n      if (!sound) {\r\n        return null;\r\n      }\r\n\r\n      // Select the sprite definition.\r\n      if (id && !sprite) {\r\n        sprite = sound._sprite || '__default';\r\n      }\r\n\r\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\r\n      // We also need to wait to make sure we don't run into race conditions with\r\n      // the order of function calls.\r\n      if (self._state !== 'loaded') {\r\n        // Set the sprite value on this sound.\r\n        sound._sprite = sprite;\r\n\r\n        // Mark this sound as not ended in case another sound is played before this one loads.\r\n        sound._ended = false;\r\n\r\n        // Add the sound to the queue to be played on load.\r\n        var soundId = sound._id;\r\n        self._queue.push({\r\n          event: 'play',\r\n          action: function() {\r\n            self.play(soundId);\r\n          }\r\n        });\r\n\r\n        return soundId;\r\n      }\r\n\r\n      // Don't play the sound if an id was passed and it is already playing.\r\n      if (id && !sound._paused) {\r\n        // Trigger the play event, in order to keep iterating through queue.\r\n        if (!internal) {\r\n          self._loadQueue('play');\r\n        }\r\n\r\n        return sound._id;\r\n      }\r\n\r\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\r\n      if (self._webAudio) {\r\n        Howler._autoResume();\r\n      }\r\n\r\n      // Determine how long to play for and where to start playing.\r\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\r\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\r\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\r\n      var start = self._sprite[sprite][0] / 1000;\r\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\r\n      sound._sprite = sprite;\r\n\r\n      // Mark the sound as ended instantly so that this async playback\r\n      // doesn't get grabbed by another call to play while this one waits to start.\r\n      sound._ended = false;\r\n\r\n      // Update the parameters of the sound.\r\n      var setParams = function() {\r\n        sound._paused = false;\r\n        sound._seek = seek;\r\n        sound._start = start;\r\n        sound._stop = stop;\r\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\r\n      };\r\n\r\n      // End the sound instantly if seek is at the end.\r\n      if (seek >= stop) {\r\n        self._ended(sound);\r\n        return;\r\n      }\r\n\r\n      // Begin the actual playback.\r\n      var node = sound._node;\r\n      if (self._webAudio) {\r\n        // Fire this when the sound is ready to play to begin Web Audio playback.\r\n        var playWebAudio = function() {\r\n          self._playLock = false;\r\n          setParams();\r\n          self._refreshBuffer(sound);\r\n\r\n          // Setup the playback params.\r\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\r\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\r\n          sound._playStart = Howler.ctx.currentTime;\r\n\r\n          // Play the sound using the supported method.\r\n          if (typeof node.bufferSource.start === 'undefined') {\r\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\r\n          } else {\r\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\r\n          }\r\n\r\n          // Start a new timer if none is present.\r\n          if (timeout !== Infinity) {\r\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\r\n          }\r\n\r\n          if (!internal) {\r\n            setTimeout(function() {\r\n              self._emit('play', sound._id);\r\n              self._loadQueue();\r\n            }, 0);\r\n          }\r\n        };\r\n\r\n        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {\r\n          playWebAudio();\r\n        } else {\r\n          self._playLock = true;\r\n\r\n          // Wait for the audio context to resume before playing.\r\n          self.once('resume', playWebAudio);\r\n\r\n          // Cancel the end timer.\r\n          self._clearTimer(sound._id);\r\n        }\r\n      } else {\r\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\r\n        var playHtml5 = function() {\r\n          node.currentTime = seek;\r\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\r\n          node.volume = sound._volume * Howler.volume();\r\n          node.playbackRate = sound._rate;\r\n\r\n          // Some browsers will throw an error if this is called without user interaction.\r\n          try {\r\n            var play = node.play();\r\n\r\n            // Support older browsers that don't support promises, and thus don't have this issue.\r\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\r\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\r\n              self._playLock = true;\r\n\r\n              // Set param values immediately.\r\n              setParams();\r\n\r\n              // Releases the lock and executes queued actions.\r\n              play\r\n                .then(function() {\r\n                  self._playLock = false;\r\n                  node._unlocked = true;\r\n                  if (!internal) {\r\n                    self._emit('play', sound._id);\r\n                  } else {\r\n                    self._loadQueue();\r\n                  }\r\n                })\r\n                .catch(function() {\r\n                  self._playLock = false;\r\n                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\r\n                    'on mobile devices and Chrome where playback was not within a user interaction.');\r\n\r\n                  // Reset the ended and paused values.\r\n                  sound._ended = true;\r\n                  sound._paused = true;\r\n                });\r\n            } else if (!internal) {\r\n              self._playLock = false;\r\n              setParams();\r\n              self._emit('play', sound._id);\r\n            }\r\n\r\n            // Setting rate before playing won't work in IE, so we set it again here.\r\n            node.playbackRate = sound._rate;\r\n\r\n            // If the node is still paused, then we can assume there was a playback issue.\r\n            if (node.paused) {\r\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\r\n                'on mobile devices and Chrome where playback was not within a user interaction.');\r\n              return;\r\n            }\r\n\r\n            // Setup the end timer on sprites or listen for the ended event.\r\n            if (sprite !== '__default' || sound._loop) {\r\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\r\n            } else {\r\n              self._endTimers[sound._id] = function() {\r\n                // Fire ended on this audio node.\r\n                self._ended(sound);\r\n\r\n                // Clear this listener.\r\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\r\n              };\r\n              node.addEventListener('ended', self._endTimers[sound._id], false);\r\n            }\r\n          } catch (err) {\r\n            self._emit('playerror', sound._id, err);\r\n          }\r\n        };\r\n\r\n        // If this is streaming audio, make sure the src is set and load again.\r\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\r\n          node.src = self._src;\r\n          node.load();\r\n        }\r\n\r\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\r\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\r\n        if (node.readyState >= 3 || loadedNoReadyState) {\r\n          playHtml5();\r\n        } else {\r\n          self._playLock = true;\r\n          self._state = 'loading';\r\n\r\n          var listener = function() {\r\n            self._state = 'loaded';\r\n            \r\n            // Begin playback.\r\n            playHtml5();\r\n\r\n            // Clear this listener.\r\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\r\n          };\r\n          node.addEventListener(Howler._canPlayEvent, listener, false);\r\n\r\n          // Cancel the end timer.\r\n          self._clearTimer(sound._id);\r\n        }\r\n      }\r\n\r\n      return sound._id;\r\n    },\r\n\r\n    /**\r\n     * Pause playback and save current position.\r\n     * @param  {Number} id The sound ID (empty to pause all in group).\r\n     * @return {Howl}\r\n     */\r\n    pause: function(id) {\r\n      var self = this;\r\n\r\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\r\n      if (self._state !== 'loaded' || self._playLock) {\r\n        self._queue.push({\r\n          event: 'pause',\r\n          action: function() {\r\n            self.pause(id);\r\n          }\r\n        });\r\n\r\n        return self;\r\n      }\r\n\r\n      // If no id is passed, get all ID's to be paused.\r\n      var ids = self._getSoundIds(id);\r\n\r\n      for (var i=0; i<ids.length; i++) {\r\n        // Clear the end timer.\r\n        self._clearTimer(ids[i]);\r\n\r\n        // Get the sound.\r\n        var sound = self._soundById(ids[i]);\r\n\r\n        if (sound && !sound._paused) {\r\n          // Reset the seek position.\r\n          sound._seek = self.seek(ids[i]);\r\n          sound._rateSeek = 0;\r\n          sound._paused = true;\r\n\r\n          // Stop currently running fades.\r\n          self._stopFade(ids[i]);\r\n\r\n          if (sound._node) {\r\n            if (self._webAudio) {\r\n              // Make sure the sound has been created.\r\n              if (!sound._node.bufferSource) {\r\n                continue;\r\n              }\r\n\r\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\r\n                sound._node.bufferSource.noteOff(0);\r\n              } else {\r\n                sound._node.bufferSource.stop(0);\r\n              }\r\n\r\n              // Clean up the buffer source.\r\n              self._cleanBuffer(sound._node);\r\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\r\n              sound._node.pause();\r\n            }\r\n          }\r\n        }\r\n\r\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\r\n        if (!arguments[1]) {\r\n          self._emit('pause', sound ? sound._id : null);\r\n        }\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Stop playback and reset to start.\r\n     * @param  {Number} id The sound ID (empty to stop all in group).\r\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\r\n     * @return {Howl}\r\n     */\r\n    stop: function(id, internal) {\r\n      var self = this;\r\n\r\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\r\n      if (self._state !== 'loaded' || self._playLock) {\r\n        self._queue.push({\r\n          event: 'stop',\r\n          action: function() {\r\n            self.stop(id);\r\n          }\r\n        });\r\n\r\n        return self;\r\n      }\r\n\r\n      // If no id is passed, get all ID's to be stopped.\r\n      var ids = self._getSoundIds(id);\r\n\r\n      for (var i=0; i<ids.length; i++) {\r\n        // Clear the end timer.\r\n        self._clearTimer(ids[i]);\r\n\r\n        // Get the sound.\r\n        var sound = self._soundById(ids[i]);\r\n\r\n        if (sound) {\r\n          // Reset the seek position.\r\n          sound._seek = sound._start || 0;\r\n          sound._rateSeek = 0;\r\n          sound._paused = true;\r\n          sound._ended = true;\r\n\r\n          // Stop currently running fades.\r\n          self._stopFade(ids[i]);\r\n\r\n          if (sound._node) {\r\n            if (self._webAudio) {\r\n              // Make sure the sound's AudioBufferSourceNode has been created.\r\n              if (sound._node.bufferSource) {\r\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\r\n                  sound._node.bufferSource.noteOff(0);\r\n                } else {\r\n                  sound._node.bufferSource.stop(0);\r\n                }\r\n\r\n                // Clean up the buffer source.\r\n                self._cleanBuffer(sound._node);\r\n              }\r\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\r\n              sound._node.currentTime = sound._start || 0;\r\n              sound._node.pause();\r\n\r\n              // If this is a live stream, stop download once the audio is stopped.\r\n              if (sound._node.duration === Infinity) {\r\n                self._clearSound(sound._node);\r\n              }\r\n            }\r\n          }\r\n\r\n          if (!internal) {\r\n            self._emit('stop', sound._id);\r\n          }\r\n        }\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Mute/unmute a single sound or all sounds in this Howl group.\r\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\r\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\r\n     * @return {Howl}\r\n     */\r\n    mute: function(muted, id) {\r\n      var self = this;\r\n\r\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\r\n      if (self._state !== 'loaded'|| self._playLock) {\r\n        self._queue.push({\r\n          event: 'mute',\r\n          action: function() {\r\n            self.mute(muted, id);\r\n          }\r\n        });\r\n\r\n        return self;\r\n      }\r\n\r\n      // If applying mute/unmute to all sounds, update the group's value.\r\n      if (typeof id === 'undefined') {\r\n        if (typeof muted === 'boolean') {\r\n          self._muted = muted;\r\n        } else {\r\n          return self._muted;\r\n        }\r\n      }\r\n\r\n      // If no id is passed, get all ID's to be muted.\r\n      var ids = self._getSoundIds(id);\r\n\r\n      for (var i=0; i<ids.length; i++) {\r\n        // Get the sound.\r\n        var sound = self._soundById(ids[i]);\r\n\r\n        if (sound) {\r\n          sound._muted = muted;\r\n\r\n          // Cancel active fade and set the volume to the end value.\r\n          if (sound._interval) {\r\n            self._stopFade(sound._id);\r\n          }\r\n\r\n          if (self._webAudio && sound._node) {\r\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\r\n          } else if (sound._node) {\r\n            sound._node.muted = Howler._muted ? true : muted;\r\n          }\r\n\r\n          self._emit('mute', sound._id);\r\n        }\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\r\n     *   volume() -> Returns the group's volume value.\r\n     *   volume(id) -> Returns the sound id's current volume.\r\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\r\n     *   volume(vol, id) -> Sets the volume of passed sound id.\r\n     * @return {Howl/Number} Returns self or current volume.\r\n     */\r\n    volume: function() {\r\n      var self = this;\r\n      var args = arguments;\r\n      var vol, id;\r\n\r\n      // Determine the values based on arguments.\r\n      if (args.length === 0) {\r\n        // Return the value of the groups' volume.\r\n        return self._volume;\r\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\r\n        // First check if this is an ID, and if not, assume it is a new volume.\r\n        var ids = self._getSoundIds();\r\n        var index = ids.indexOf(args[0]);\r\n        if (index >= 0) {\r\n          id = parseInt(args[0], 10);\r\n        } else {\r\n          vol = parseFloat(args[0]);\r\n        }\r\n      } else if (args.length >= 2) {\r\n        vol = parseFloat(args[0]);\r\n        id = parseInt(args[1], 10);\r\n      }\r\n\r\n      // Update the volume or return the current volume.\r\n      var sound;\r\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\r\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\r\n        if (self._state !== 'loaded'|| self._playLock) {\r\n          self._queue.push({\r\n            event: 'volume',\r\n            action: function() {\r\n              self.volume.apply(self, args);\r\n            }\r\n          });\r\n\r\n          return self;\r\n        }\r\n\r\n        // Set the group volume.\r\n        if (typeof id === 'undefined') {\r\n          self._volume = vol;\r\n        }\r\n\r\n        // Update one or all volumes.\r\n        id = self._getSoundIds(id);\r\n        for (var i=0; i<id.length; i++) {\r\n          // Get the sound.\r\n          sound = self._soundById(id[i]);\r\n\r\n          if (sound) {\r\n            sound._volume = vol;\r\n\r\n            // Stop currently running fades.\r\n            if (!args[2]) {\r\n              self._stopFade(id[i]);\r\n            }\r\n\r\n            if (self._webAudio && sound._node && !sound._muted) {\r\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\r\n            } else if (sound._node && !sound._muted) {\r\n              sound._node.volume = vol * Howler.volume();\r\n            }\r\n\r\n            self._emit('volume', sound._id);\r\n          }\r\n        }\r\n      } else {\r\n        sound = id ? self._soundById(id) : self._sounds[0];\r\n        return sound ? sound._volume : 0;\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\r\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\r\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\r\n     * @param  {Number} len  Time in milliseconds to fade.\r\n     * @param  {Number} id   The sound id (omit to fade all sounds).\r\n     * @return {Howl}\r\n     */\r\n    fade: function(from, to, len, id) {\r\n      var self = this;\r\n\r\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\r\n      if (self._state !== 'loaded' || self._playLock) {\r\n        self._queue.push({\r\n          event: 'fade',\r\n          action: function() {\r\n            self.fade(from, to, len, id);\r\n          }\r\n        });\r\n\r\n        return self;\r\n      }\r\n\r\n      // Make sure the to/from/len values are numbers.\r\n      from = Math.min(Math.max(0, parseFloat(from)), 1);\r\n      to = Math.min(Math.max(0, parseFloat(to)), 1);\r\n      len = parseFloat(len);\r\n\r\n      // Set the volume to the start position.\r\n      self.volume(from, id);\r\n\r\n      // Fade the volume of one or all sounds.\r\n      var ids = self._getSoundIds(id);\r\n      for (var i=0; i<ids.length; i++) {\r\n        // Get the sound.\r\n        var sound = self._soundById(ids[i]);\r\n\r\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\r\n        if (sound) {\r\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\r\n          if (!id) {\r\n            self._stopFade(ids[i]);\r\n          }\r\n\r\n          // If we are using Web Audio, let the native methods do the actual fade.\r\n          if (self._webAudio && !sound._muted) {\r\n            var currentTime = Howler.ctx.currentTime;\r\n            var end = currentTime + (len / 1000);\r\n            sound._volume = from;\r\n            sound._node.gain.setValueAtTime(from, currentTime);\r\n            sound._node.gain.linearRampToValueAtTime(to, end);\r\n          }\r\n\r\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\r\n        }\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Starts the internal interval to fade a sound.\r\n     * @param  {Object} sound Reference to sound to fade.\r\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\r\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\r\n     * @param  {Number} len  Time in milliseconds to fade.\r\n     * @param  {Number} id   The sound id to fade.\r\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\r\n     */\r\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\r\n      var self = this;\r\n      var vol = from;\r\n      var diff = to - from;\r\n      var steps = Math.abs(diff / 0.01);\r\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\r\n      var lastTick = Date.now();\r\n\r\n      // Store the value being faded to.\r\n      sound._fadeTo = to;\r\n\r\n      // Update the volume value on each interval tick.\r\n      sound._interval = setInterval(function() {\r\n        // Update the volume based on the time since the last tick.\r\n        var tick = (Date.now() - lastTick) / len;\r\n        lastTick = Date.now();\r\n        vol += diff * tick;\r\n\r\n        // Round to within 2 decimal points.\r\n        vol = Math.round(vol * 100) / 100;\r\n\r\n        // Make sure the volume is in the right bounds.\r\n        if (diff < 0) {\r\n          vol = Math.max(to, vol);\r\n        } else {\r\n          vol = Math.min(to, vol);\r\n        }\r\n\r\n        // Change the volume.\r\n        if (self._webAudio) {\r\n          sound._volume = vol;\r\n        } else {\r\n          self.volume(vol, sound._id, true);\r\n        }\r\n\r\n        // Set the group's volume.\r\n        if (isGroup) {\r\n          self._volume = vol;\r\n        }\r\n\r\n        // When the fade is complete, stop it and fire event.\r\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\r\n          clearInterval(sound._interval);\r\n          sound._interval = null;\r\n          sound._fadeTo = null;\r\n          self.volume(to, sound._id);\r\n          self._emit('fade', sound._id);\r\n        }\r\n      }, stepLen);\r\n    },\r\n\r\n    /**\r\n     * Internal method that stops the currently playing fade when\r\n     * a new fade starts, volume is changed or the sound is stopped.\r\n     * @param  {Number} id The sound id.\r\n     * @return {Howl}\r\n     */\r\n    _stopFade: function(id) {\r\n      var self = this;\r\n      var sound = self._soundById(id);\r\n\r\n      if (sound && sound._interval) {\r\n        if (self._webAudio) {\r\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\r\n        }\r\n\r\n        clearInterval(sound._interval);\r\n        sound._interval = null;\r\n        self.volume(sound._fadeTo, id);\r\n        sound._fadeTo = null;\r\n        self._emit('fade', id);\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\r\n     *   loop() -> Returns the group's loop value.\r\n     *   loop(id) -> Returns the sound id's loop value.\r\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\r\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\r\n     * @return {Howl/Boolean} Returns self or current loop value.\r\n     */\r\n    loop: function() {\r\n      var self = this;\r\n      var args = arguments;\r\n      var loop, id, sound;\r\n\r\n      // Determine the values for loop and id.\r\n      if (args.length === 0) {\r\n        // Return the grou's loop value.\r\n        return self._loop;\r\n      } else if (args.length === 1) {\r\n        if (typeof args[0] === 'boolean') {\r\n          loop = args[0];\r\n          self._loop = loop;\r\n        } else {\r\n          // Return this sound's loop value.\r\n          sound = self._soundById(parseInt(args[0], 10));\r\n          return sound ? sound._loop : false;\r\n        }\r\n      } else if (args.length === 2) {\r\n        loop = args[0];\r\n        id = parseInt(args[1], 10);\r\n      }\r\n\r\n      // If no id is passed, get all ID's to be looped.\r\n      var ids = self._getSoundIds(id);\r\n      for (var i=0; i<ids.length; i++) {\r\n        sound = self._soundById(ids[i]);\r\n\r\n        if (sound) {\r\n          sound._loop = loop;\r\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\r\n            sound._node.bufferSource.loop = loop;\r\n            if (loop) {\r\n              sound._node.bufferSource.loopStart = sound._start || 0;\r\n              sound._node.bufferSource.loopEnd = sound._stop;\r\n\r\n              // If playing, restart playback to ensure looping updates.\r\n              if (self.playing(ids[i])) {\r\n                self.pause(ids[i], true);\r\n                self.play(ids[i], true);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\r\n     *   rate() -> Returns the first sound node's current playback rate.\r\n     *   rate(id) -> Returns the sound id's current playback rate.\r\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\r\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\r\n     * @return {Howl/Number} Returns self or the current playback rate.\r\n     */\r\n    rate: function() {\r\n      var self = this;\r\n      var args = arguments;\r\n      var rate, id;\r\n\r\n      // Determine the values based on arguments.\r\n      if (args.length === 0) {\r\n        // We will simply return the current rate of the first node.\r\n        id = self._sounds[0]._id;\r\n      } else if (args.length === 1) {\r\n        // First check if this is an ID, and if not, assume it is a new rate value.\r\n        var ids = self._getSoundIds();\r\n        var index = ids.indexOf(args[0]);\r\n        if (index >= 0) {\r\n          id = parseInt(args[0], 10);\r\n        } else {\r\n          rate = parseFloat(args[0]);\r\n        }\r\n      } else if (args.length === 2) {\r\n        rate = parseFloat(args[0]);\r\n        id = parseInt(args[1], 10);\r\n      }\r\n\r\n      // Update the playback rate or return the current value.\r\n      var sound;\r\n      if (typeof rate === 'number') {\r\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\r\n        if (self._state !== 'loaded' || self._playLock) {\r\n          self._queue.push({\r\n            event: 'rate',\r\n            action: function() {\r\n              self.rate.apply(self, args);\r\n            }\r\n          });\r\n\r\n          return self;\r\n        }\r\n\r\n        // Set the group rate.\r\n        if (typeof id === 'undefined') {\r\n          self._rate = rate;\r\n        }\r\n\r\n        // Update one or all volumes.\r\n        id = self._getSoundIds(id);\r\n        for (var i=0; i<id.length; i++) {\r\n          // Get the sound.\r\n          sound = self._soundById(id[i]);\r\n\r\n          if (sound) {\r\n            // Keep track of our position when the rate changed and update the playback\r\n            // start position so we can properly adjust the seek position for time elapsed.\r\n            if (self.playing(id[i])) {\r\n              sound._rateSeek = self.seek(id[i]);\r\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\r\n            }\r\n            sound._rate = rate;\r\n\r\n            // Change the playback rate.\r\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\r\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\r\n            } else if (sound._node) {\r\n              sound._node.playbackRate = rate;\r\n            }\r\n\r\n            // Reset the timers.\r\n            var seek = self.seek(id[i]);\r\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\r\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\r\n\r\n            // Start a new end timer if sound is already playing.\r\n            if (self._endTimers[id[i]] || !sound._paused) {\r\n              self._clearTimer(id[i]);\r\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\r\n            }\r\n\r\n            self._emit('rate', sound._id);\r\n          }\r\n        }\r\n      } else {\r\n        sound = self._soundById(id);\r\n        return sound ? sound._rate : self._rate;\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\r\n     *   seek() -> Returns the first sound node's current seek position.\r\n     *   seek(id) -> Returns the sound id's current seek position.\r\n     *   seek(seek) -> Sets the seek position of the first sound node.\r\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\r\n     * @return {Howl/Number} Returns self or the current seek position.\r\n     */\r\n    seek: function() {\r\n      var self = this;\r\n      var args = arguments;\r\n      var seek, id;\r\n\r\n      // Determine the values based on arguments.\r\n      if (args.length === 0) {\r\n        // We will simply return the current position of the first node.\r\n        if (self._sounds.length) {\r\n          id = self._sounds[0]._id;\r\n        }\r\n      } else if (args.length === 1) {\r\n        // First check if this is an ID, and if not, assume it is a new seek position.\r\n        var ids = self._getSoundIds();\r\n        var index = ids.indexOf(args[0]);\r\n        if (index >= 0) {\r\n          id = parseInt(args[0], 10);\r\n        } else if (self._sounds.length) {\r\n          id = self._sounds[0]._id;\r\n          seek = parseFloat(args[0]);\r\n        }\r\n      } else if (args.length === 2) {\r\n        seek = parseFloat(args[0]);\r\n        id = parseInt(args[1], 10);\r\n      }\r\n\r\n      // If there is no ID, bail out.\r\n      if (typeof id === 'undefined') {\r\n        return 0;\r\n      }\r\n\r\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\r\n      if (typeof seek === 'number' && (self._state !== 'loaded' || self._playLock)) {\r\n        self._queue.push({\r\n          event: 'seek',\r\n          action: function() {\r\n            self.seek.apply(self, args);\r\n          }\r\n        });\r\n\r\n        return self;\r\n      }\r\n\r\n      // Get the sound.\r\n      var sound = self._soundById(id);\r\n\r\n      if (sound) {\r\n        if (typeof seek === 'number' && seek >= 0) {\r\n          // Pause the sound and update position for restarting playback.\r\n          var playing = self.playing(id);\r\n          if (playing) {\r\n            self.pause(id, true);\r\n          }\r\n\r\n          // Move the position of the track and cancel timer.\r\n          sound._seek = seek;\r\n          sound._ended = false;\r\n          self._clearTimer(id);\r\n\r\n          // Update the seek position for HTML5 Audio.\r\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\r\n            sound._node.currentTime = seek;\r\n          }\r\n\r\n          // Seek and emit when ready.\r\n          var seekAndEmit = function() {\r\n            // Restart the playback if the sound was playing.\r\n            if (playing) {\r\n              self.play(id, true);\r\n            }\r\n\r\n            self._emit('seek', id);\r\n          };\r\n\r\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\r\n          if (playing && !self._webAudio) {\r\n            var emitSeek = function() {\r\n              if (!self._playLock) {\r\n                seekAndEmit();\r\n              } else {\r\n                setTimeout(emitSeek, 0);\r\n              }\r\n            };\r\n            setTimeout(emitSeek, 0);\r\n          } else {\r\n            seekAndEmit();\r\n          }\r\n        } else {\r\n          if (self._webAudio) {\r\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\r\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\r\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\r\n          } else {\r\n            return sound._node.currentTime;\r\n          }\r\n        }\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\r\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\r\n     * @return {Boolean} True if playing and false if not.\r\n     */\r\n    playing: function(id) {\r\n      var self = this;\r\n\r\n      // Check the passed sound ID (if any).\r\n      if (typeof id === 'number') {\r\n        var sound = self._soundById(id);\r\n        return sound ? !sound._paused : false;\r\n      }\r\n\r\n      // Otherwise, loop through all sounds and check if any are playing.\r\n      for (var i=0; i<self._sounds.length; i++) {\r\n        if (!self._sounds[i]._paused) {\r\n          return true;\r\n        }\r\n      }\r\n\r\n      return false;\r\n    },\r\n\r\n    /**\r\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\r\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\r\n     * @return {Number} Audio duration in seconds.\r\n     */\r\n    duration: function(id) {\r\n      var self = this;\r\n      var duration = self._duration;\r\n\r\n      // If we pass an ID, get the sound and return the sprite length.\r\n      var sound = self._soundById(id);\r\n      if (sound) {\r\n        duration = self._sprite[sound._sprite][1] / 1000;\r\n      }\r\n\r\n      return duration;\r\n    },\r\n\r\n    /**\r\n     * Returns the current loaded state of this Howl.\r\n     * @return {String} 'unloaded', 'loading', 'loaded'\r\n     */\r\n    state: function() {\r\n      return this._state;\r\n    },\r\n\r\n    /**\r\n     * Unload and destroy the current Howl object.\r\n     * This will immediately stop all sound instances attached to this group.\r\n     */\r\n    unload: function() {\r\n      var self = this;\r\n\r\n      // Stop playing any active sounds.\r\n      var sounds = self._sounds;\r\n      for (var i=0; i<sounds.length; i++) {\r\n        // Stop the sound if it is currently playing.\r\n        if (!sounds[i]._paused) {\r\n          self.stop(sounds[i]._id);\r\n        }\r\n\r\n        // Remove the source or disconnect.\r\n        if (!self._webAudio) {\r\n          // Set the source to 0-second silence to stop any downloading (except in IE).\r\n          self._clearSound(sounds[i]._node);\r\n\r\n          // Remove any event listeners.\r\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\r\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\r\n          sounds[i]._node.removeEventListener('ended', sounds[i]._endFn, false);\r\n\r\n          // Release the Audio object back to the pool.\r\n          Howler._releaseHtml5Audio(sounds[i]._node);\r\n        }\r\n\r\n        // Empty out all of the nodes.\r\n        delete sounds[i]._node;\r\n\r\n        // Make sure all timers are cleared out.\r\n        self._clearTimer(sounds[i]._id);\r\n      }\r\n\r\n      // Remove the references in the global Howler object.\r\n      var index = Howler._howls.indexOf(self);\r\n      if (index >= 0) {\r\n        Howler._howls.splice(index, 1);\r\n      }\r\n\r\n      // Delete this sound from the cache (if no other Howl is using it).\r\n      var remCache = true;\r\n      for (i=0; i<Howler._howls.length; i++) {\r\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\r\n          remCache = false;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (cache && remCache) {\r\n        delete cache[self._src];\r\n      }\r\n\r\n      // Clear global errors.\r\n      Howler.noAudio = false;\r\n\r\n      // Clear out `self`.\r\n      self._state = 'unloaded';\r\n      self._sounds = [];\r\n      self = null;\r\n\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * Listen to a custom event.\r\n     * @param  {String}   event Event name.\r\n     * @param  {Function} fn    Listener to call.\r\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\r\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\r\n     * @return {Howl}\r\n     */\r\n    on: function(event, fn, id, once) {\r\n      var self = this;\r\n      var events = self['_on' + event];\r\n\r\n      if (typeof fn === 'function') {\r\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Remove a custom event. Call without parameters to remove all events.\r\n     * @param  {String}   event Event name.\r\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\r\n     * @param  {Number}   id    (optional) Only remove events for this sound.\r\n     * @return {Howl}\r\n     */\r\n    off: function(event, fn, id) {\r\n      var self = this;\r\n      var events = self['_on' + event];\r\n      var i = 0;\r\n\r\n      // Allow passing just an event and ID.\r\n      if (typeof fn === 'number') {\r\n        id = fn;\r\n        fn = null;\r\n      }\r\n\r\n      if (fn || id) {\r\n        // Loop through event store and remove the passed function.\r\n        for (i=0; i<events.length; i++) {\r\n          var isId = (id === events[i].id);\r\n          if (fn === events[i].fn && isId || !fn && isId) {\r\n            events.splice(i, 1);\r\n            break;\r\n          }\r\n        }\r\n      } else if (event) {\r\n        // Clear out all events of this type.\r\n        self['_on' + event] = [];\r\n      } else {\r\n        // Clear out all events of every type.\r\n        var keys = Object.keys(self);\r\n        for (i=0; i<keys.length; i++) {\r\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\r\n            self[keys[i]] = [];\r\n          }\r\n        }\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Listen to a custom event and remove it once fired.\r\n     * @param  {String}   event Event name.\r\n     * @param  {Function} fn    Listener to call.\r\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\r\n     * @return {Howl}\r\n     */\r\n    once: function(event, fn, id) {\r\n      var self = this;\r\n\r\n      // Setup the event listener.\r\n      self.on(event, fn, id, 1);\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Emit all events of a specific type and pass the sound id.\r\n     * @param  {String} event Event name.\r\n     * @param  {Number} id    Sound ID.\r\n     * @param  {Number} msg   Message to go with event.\r\n     * @return {Howl}\r\n     */\r\n    _emit: function(event, id, msg) {\r\n      var self = this;\r\n      var events = self['_on' + event];\r\n\r\n      // Loop through event store and fire all functions.\r\n      for (var i=events.length-1; i>=0; i--) {\r\n        // Only fire the listener if the correct ID is used.\r\n        if (!events[i].id || events[i].id === id || event === 'load') {\r\n          setTimeout(function(fn) {\r\n            fn.call(this, id, msg);\r\n          }.bind(self, events[i].fn), 0);\r\n\r\n          // If this event was setup with `once`, remove it.\r\n          if (events[i].once) {\r\n            self.off(event, events[i].fn, events[i].id);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Pass the event type into load queue so that it can continue stepping.\r\n      self._loadQueue(event);\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Queue of actions initiated before the sound has loaded.\r\n     * These will be called in sequence, with the next only firing\r\n     * after the previous has finished executing (even if async like play).\r\n     * @return {Howl}\r\n     */\r\n    _loadQueue: function(event) {\r\n      var self = this;\r\n\r\n      if (self._queue.length > 0) {\r\n        var task = self._queue[0];\r\n\r\n        // Remove this task if a matching event was passed.\r\n        if (task.event === event) {\r\n          self._queue.shift();\r\n          self._loadQueue();\r\n        }\r\n\r\n        // Run the task if no event type is passed.\r\n        if (!event) {\r\n          task.action();\r\n        }\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Fired when playback ends at the end of the duration.\r\n     * @param  {Sound} sound The sound object to work with.\r\n     * @return {Howl}\r\n     */\r\n    _ended: function(sound) {\r\n      var self = this;\r\n      var sprite = sound._sprite;\r\n\r\n      // If we are using IE and there was network latency we may be clipping\r\n      // audio before it completes playing. Lets check the node to make sure it\r\n      // believes it has completed, before ending the playback.\r\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\r\n        setTimeout(self._ended.bind(self, sound), 100);\r\n        return self;\r\n      }\r\n\r\n      // Should this sound loop?\r\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\r\n\r\n      // Fire the ended event.\r\n      self._emit('end', sound._id);\r\n\r\n      // Restart the playback for HTML5 Audio loop.\r\n      if (!self._webAudio && loop) {\r\n        self.stop(sound._id, true).play(sound._id);\r\n      }\r\n\r\n      // Restart this timer if on a Web Audio loop.\r\n      if (self._webAudio && loop) {\r\n        self._emit('play', sound._id);\r\n        sound._seek = sound._start || 0;\r\n        sound._rateSeek = 0;\r\n        sound._playStart = Howler.ctx.currentTime;\r\n\r\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\r\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\r\n      }\r\n\r\n      // Mark the node as paused.\r\n      if (self._webAudio && !loop) {\r\n        sound._paused = true;\r\n        sound._ended = true;\r\n        sound._seek = sound._start || 0;\r\n        sound._rateSeek = 0;\r\n        self._clearTimer(sound._id);\r\n\r\n        // Clean up the buffer source.\r\n        self._cleanBuffer(sound._node);\r\n\r\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\r\n        Howler._autoSuspend();\r\n      }\r\n\r\n      // When using a sprite, end the track.\r\n      if (!self._webAudio && !loop) {\r\n        self.stop(sound._id, true);\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Clear the end timer for a sound playback.\r\n     * @param  {Number} id The sound ID.\r\n     * @return {Howl}\r\n     */\r\n    _clearTimer: function(id) {\r\n      var self = this;\r\n\r\n      if (self._endTimers[id]) {\r\n        // Clear the timeout or remove the ended listener.\r\n        if (typeof self._endTimers[id] !== 'function') {\r\n          clearTimeout(self._endTimers[id]);\r\n        } else {\r\n          var sound = self._soundById(id);\r\n          if (sound && sound._node) {\r\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\r\n          }\r\n        }\r\n\r\n        delete self._endTimers[id];\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Return the sound identified by this ID, or return null.\r\n     * @param  {Number} id Sound ID\r\n     * @return {Object}    Sound object or null.\r\n     */\r\n    _soundById: function(id) {\r\n      var self = this;\r\n\r\n      // Loop through all sounds and find the one with this ID.\r\n      for (var i=0; i<self._sounds.length; i++) {\r\n        if (id === self._sounds[i]._id) {\r\n          return self._sounds[i];\r\n        }\r\n      }\r\n\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * Return an inactive sound from the pool or create a new one.\r\n     * @return {Sound} Sound playback object.\r\n     */\r\n    _inactiveSound: function() {\r\n      var self = this;\r\n\r\n      self._drain();\r\n\r\n      // Find the first inactive node to recycle.\r\n      for (var i=0; i<self._sounds.length; i++) {\r\n        if (self._sounds[i]._ended) {\r\n          return self._sounds[i].reset();\r\n        }\r\n      }\r\n\r\n      // If no inactive node was found, create a new one.\r\n      return new Sound(self);\r\n    },\r\n\r\n    /**\r\n     * Drain excess inactive sounds from the pool.\r\n     */\r\n    _drain: function() {\r\n      var self = this;\r\n      var limit = self._pool;\r\n      var cnt = 0;\r\n      var i = 0;\r\n\r\n      // If there are less sounds than the max pool size, we are done.\r\n      if (self._sounds.length < limit) {\r\n        return;\r\n      }\r\n\r\n      // Count the number of inactive sounds.\r\n      for (i=0; i<self._sounds.length; i++) {\r\n        if (self._sounds[i]._ended) {\r\n          cnt++;\r\n        }\r\n      }\r\n\r\n      // Remove excess inactive sounds, going in reverse order.\r\n      for (i=self._sounds.length - 1; i>=0; i--) {\r\n        if (cnt <= limit) {\r\n          return;\r\n        }\r\n\r\n        if (self._sounds[i]._ended) {\r\n          // Disconnect the audio source when using Web Audio.\r\n          if (self._webAudio && self._sounds[i]._node) {\r\n            self._sounds[i]._node.disconnect(0);\r\n          }\r\n\r\n          // Remove sounds until we have the pool size.\r\n          self._sounds.splice(i, 1);\r\n          cnt--;\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Get all ID's from the sounds pool.\r\n     * @param  {Number} id Only return one ID if one is passed.\r\n     * @return {Array}    Array of IDs.\r\n     */\r\n    _getSoundIds: function(id) {\r\n      var self = this;\r\n\r\n      if (typeof id === 'undefined') {\r\n        var ids = [];\r\n        for (var i=0; i<self._sounds.length; i++) {\r\n          ids.push(self._sounds[i]._id);\r\n        }\r\n\r\n        return ids;\r\n      } else {\r\n        return [id];\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Load the sound back into the buffer source.\r\n     * @param  {Sound} sound The sound object to work with.\r\n     * @return {Howl}\r\n     */\r\n    _refreshBuffer: function(sound) {\r\n      var self = this;\r\n\r\n      // Setup the buffer source for playback.\r\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\r\n      sound._node.bufferSource.buffer = cache[self._src];\r\n\r\n      // Connect to the correct node.\r\n      if (sound._panner) {\r\n        sound._node.bufferSource.connect(sound._panner);\r\n      } else {\r\n        sound._node.bufferSource.connect(sound._node);\r\n      }\r\n\r\n      // Setup looping and playback rate.\r\n      sound._node.bufferSource.loop = sound._loop;\r\n      if (sound._loop) {\r\n        sound._node.bufferSource.loopStart = sound._start || 0;\r\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\r\n      }\r\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Prevent memory leaks by cleaning up the buffer source after playback.\r\n     * @param  {Object} node Sound's audio node containing the buffer source.\r\n     * @return {Howl}\r\n     */\r\n    _cleanBuffer: function(node) {\r\n      var self = this;\r\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\r\n\r\n      if (!node.bufferSource) {\r\n        return self;\r\n      }\r\n\r\n      if (Howler._scratchBuffer && node.bufferSource) {\r\n        node.bufferSource.onended = null;\r\n        node.bufferSource.disconnect(0);\r\n        if (isIOS) {\r\n          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\r\n        }\r\n      }\r\n      node.bufferSource = null;\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\r\n     * @param  {Object} node Audio node to clear.\r\n     */\r\n    _clearSound: function(node) {\r\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\r\n      if (!checkIE) {\r\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\r\n      }\r\n    }\r\n  };\r\n\r\n  /** Single Sound Methods **/\r\n  /***************************************************************************/\r\n\r\n  /**\r\n   * Setup the sound object, which each node attached to a Howl group is contained in.\r\n   * @param {Object} howl The Howl parent group.\r\n   */\r\n  var Sound = function(howl) {\r\n    this._parent = howl;\r\n    this.init();\r\n  };\r\n  Sound.prototype = {\r\n    /**\r\n     * Initialize a new Sound object.\r\n     * @return {Sound}\r\n     */\r\n    init: function() {\r\n      var self = this;\r\n      var parent = self._parent;\r\n\r\n      // Setup the default parameters.\r\n      self._muted = parent._muted;\r\n      self._loop = parent._loop;\r\n      self._volume = parent._volume;\r\n      self._rate = parent._rate;\r\n      self._seek = 0;\r\n      self._paused = true;\r\n      self._ended = true;\r\n      self._sprite = '__default';\r\n\r\n      // Generate a unique ID for this sound.\r\n      self._id = ++Howler._counter;\r\n\r\n      // Add itself to the parent's pool.\r\n      parent._sounds.push(self);\r\n\r\n      // Create the new node.\r\n      self.create();\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\r\n     * @return {Sound}\r\n     */\r\n    create: function() {\r\n      var self = this;\r\n      var parent = self._parent;\r\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\r\n\r\n      if (parent._webAudio) {\r\n        // Create the gain node for controlling volume (the source will connect to this).\r\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\r\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\r\n        self._node.paused = true;\r\n        self._node.connect(Howler.masterGain);\r\n      } else if (!Howler.noAudio) {\r\n        // Get an unlocked Audio object from the pool.\r\n        self._node = Howler._obtainHtml5Audio();\r\n\r\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\r\n        self._errorFn = self._errorListener.bind(self);\r\n        self._node.addEventListener('error', self._errorFn, false);\r\n\r\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\r\n        self._loadFn = self._loadListener.bind(self);\r\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\r\n\r\n        // Listen for the 'ended' event on the sound to account for edge-case where\r\n        // a finite sound has a duration of Infinity.\r\n        self._endFn = self._endListener.bind(self);\r\n        self._node.addEventListener('ended', self._endFn, false);\r\n\r\n        // Setup the new audio node.\r\n        self._node.src = parent._src;\r\n        self._node.preload = parent._preload === true ? 'auto' : parent._preload;\r\n        self._node.volume = volume * Howler.volume();\r\n\r\n        // Begin loading the source.\r\n        self._node.load();\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Reset the parameters of this sound to the original state (for recycle).\r\n     * @return {Sound}\r\n     */\r\n    reset: function() {\r\n      var self = this;\r\n      var parent = self._parent;\r\n\r\n      // Reset all of the parameters of this sound.\r\n      self._muted = parent._muted;\r\n      self._loop = parent._loop;\r\n      self._volume = parent._volume;\r\n      self._rate = parent._rate;\r\n      self._seek = 0;\r\n      self._rateSeek = 0;\r\n      self._paused = true;\r\n      self._ended = true;\r\n      self._sprite = '__default';\r\n\r\n      // Generate a new ID so that it isn't confused with the previous sound.\r\n      self._id = ++Howler._counter;\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * HTML5 Audio error listener callback.\r\n     */\r\n    _errorListener: function() {\r\n      var self = this;\r\n\r\n      // Fire an error event and pass back the code.\r\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\r\n\r\n      // Clear the event listener.\r\n      self._node.removeEventListener('error', self._errorFn, false);\r\n    },\r\n\r\n    /**\r\n     * HTML5 Audio canplaythrough listener callback.\r\n     */\r\n    _loadListener: function() {\r\n      var self = this;\r\n      var parent = self._parent;\r\n\r\n      // Round up the duration to account for the lower precision in HTML5 Audio.\r\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\r\n\r\n      // Setup a sprite if none is defined.\r\n      if (Object.keys(parent._sprite).length === 0) {\r\n        parent._sprite = {__default: [0, parent._duration * 1000]};\r\n      }\r\n\r\n      if (parent._state !== 'loaded') {\r\n        parent._state = 'loaded';\r\n        parent._emit('load');\r\n        parent._loadQueue();\r\n      }\r\n\r\n      // Clear the event listener.\r\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\r\n    },\r\n\r\n    /**\r\n     * HTML5 Audio ended listener callback.\r\n     */\r\n    _endListener: function() {\r\n      var self = this;\r\n      var parent = self._parent;\r\n\r\n      // Only handle the `ended`` event if the duration is Infinity.\r\n      if (parent._duration === Infinity) {\r\n        // Update the parent duration to match the real audio duration.\r\n        // Round up the duration to account for the lower precision in HTML5 Audio.\r\n        parent._duration = Math.ceil(self._node.duration * 10) / 10;\r\n\r\n        // Update the sprite that corresponds to the real duration.\r\n        if (parent._sprite.__default[1] === Infinity) {\r\n          parent._sprite.__default[1] = parent._duration * 1000;\r\n        }\r\n\r\n        // Run the regular ended method.\r\n        parent._ended(self);\r\n      }\r\n\r\n      // Clear the event listener since the duration is now correct.\r\n      self._node.removeEventListener('ended', self._endFn, false);\r\n    }\r\n  };\r\n\r\n  /** Helper Methods **/\r\n  /***************************************************************************/\r\n\r\n  var cache = {};\r\n\r\n  /**\r\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\r\n   * @param  {Howl} self\r\n   */\r\n  var loadBuffer = function(self) {\r\n    var url = self._src;\r\n\r\n    // Check if the buffer has already been cached and use it instead.\r\n    if (cache[url]) {\r\n      // Set the duration from the cache.\r\n      self._duration = cache[url].duration;\r\n\r\n      // Load the sound into this Howl.\r\n      loadSound(self);\r\n\r\n      return;\r\n    }\r\n\r\n    if (/^data:[^;]+;base64,/.test(url)) {\r\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\r\n      var data = atob(url.split(',')[1]);\r\n      var dataView = new Uint8Array(data.length);\r\n      for (var i=0; i<data.length; ++i) {\r\n        dataView[i] = data.charCodeAt(i);\r\n      }\r\n\r\n      decodeAudioData(dataView.buffer, self);\r\n    } else {\r\n      // Load the buffer from the URL.\r\n      var xhr = new XMLHttpRequest();\r\n      xhr.open(self._xhr.method, url, true);\r\n      xhr.withCredentials = self._xhr.withCredentials;\r\n      xhr.responseType = 'arraybuffer';\r\n\r\n      // Apply any custom headers to the request.\r\n      if (self._xhr.headers) {\r\n        Object.keys(self._xhr.headers).forEach(function(key) {\r\n          xhr.setRequestHeader(key, self._xhr.headers[key]);\r\n        });\r\n      }\r\n\r\n      xhr.onload = function() {\r\n        // Make sure we get a successful response back.\r\n        var code = (xhr.status + '')[0];\r\n        if (code !== '0' && code !== '2' && code !== '3') {\r\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\r\n          return;\r\n        }\r\n\r\n        decodeAudioData(xhr.response, self);\r\n      };\r\n      xhr.onerror = function() {\r\n        // If there is an error, switch to HTML5 Audio.\r\n        if (self._webAudio) {\r\n          self._html5 = true;\r\n          self._webAudio = false;\r\n          self._sounds = [];\r\n          delete cache[url];\r\n          self.load();\r\n        }\r\n      };\r\n      safeXhrSend(xhr);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Send the XHR request wrapped in a try/catch.\r\n   * @param  {Object} xhr XHR to send.\r\n   */\r\n  var safeXhrSend = function(xhr) {\r\n    try {\r\n      xhr.send();\r\n    } catch (e) {\r\n      xhr.onerror();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Decode audio data from an array buffer.\r\n   * @param  {ArrayBuffer} arraybuffer The audio data.\r\n   * @param  {Howl}        self\r\n   */\r\n  var decodeAudioData = function(arraybuffer, self) {\r\n    // Fire a load error if something broke.\r\n    var error = function() {\r\n      self._emit('loaderror', null, 'Decoding audio data failed.');\r\n    };\r\n\r\n    // Load the sound on success.\r\n    var success = function(buffer) {\r\n      if (buffer && self._sounds.length > 0) {\r\n        cache[self._src] = buffer;\r\n        loadSound(self, buffer);\r\n      } else {\r\n        error();\r\n      }\r\n    };\r\n\r\n    // Decode the buffer into an audio source.\r\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\r\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\r\n    } else {\r\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\r\n   * @param  {Howl} self\r\n   * @param  {Object} buffer The decoded buffer sound source.\r\n   */\r\n  var loadSound = function(self, buffer) {\r\n    // Set the duration.\r\n    if (buffer && !self._duration) {\r\n      self._duration = buffer.duration;\r\n    }\r\n\r\n    // Setup a sprite if none is defined.\r\n    if (Object.keys(self._sprite).length === 0) {\r\n      self._sprite = {__default: [0, self._duration * 1000]};\r\n    }\r\n\r\n    // Fire the loaded event.\r\n    if (self._state !== 'loaded') {\r\n      self._state = 'loaded';\r\n      self._emit('load');\r\n      self._loadQueue();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\r\n   */\r\n  var setupAudioContext = function() {\r\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\r\n    if (!Howler.usingWebAudio) {\r\n      return;\r\n    }\r\n\r\n    // Check if we are using Web Audio and setup the AudioContext if we are.\r\n    try {\r\n      if (typeof AudioContext !== 'undefined') {\r\n        Howler.ctx = new AudioContext();\r\n      } else if (typeof webkitAudioContext !== 'undefined') {\r\n        Howler.ctx = new webkitAudioContext();\r\n      } else {\r\n        Howler.usingWebAudio = false;\r\n      }\r\n    } catch(e) {\r\n      Howler.usingWebAudio = false;\r\n    }\r\n\r\n    // If the audio context creation still failed, set using web audio to false.\r\n    if (!Howler.ctx) {\r\n      Howler.usingWebAudio = false;\r\n    }\r\n\r\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\r\n    // If it is, disable Web Audio as it causes crashing.\r\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\r\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\r\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\r\n    if (iOS && version && version < 9) {\r\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\r\n      if (Howler._navigator && !safari) {\r\n        Howler.usingWebAudio = false;\r\n      }\r\n    }\r\n\r\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\r\n    if (Howler.usingWebAudio) {\r\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\r\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\r\n      Howler.masterGain.connect(Howler.ctx.destination);\r\n    }\r\n\r\n    // Re-run the setup on Howler.\r\n    Howler._setup();\r\n  };\r\n\r\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\r\n  if (typeof define === 'function' && define.amd) {\r\n    define([], function() {\r\n      return {\r\n        Howler: Howler,\r\n        Howl: Howl\r\n      };\r\n    });\r\n  }\r\n\r\n  // Add support for CommonJS libraries such as browserify.\r\n  if (typeof exports !== 'undefined') {\r\n    exports.Howler = Howler;\r\n    exports.Howl = Howl;\r\n  }\r\n\r\n  // Add to global in Node.js (for testing, etc).\r\n  if (typeof global !== 'undefined') {\r\n    global.HowlerGlobal = HowlerGlobal;\r\n    global.Howler = Howler;\r\n    global.Howl = Howl;\r\n    global.Sound = Sound;\r\n  } else if (typeof window !== 'undefined') {  // Define globally in case AMD is not available or unused.\r\n    window.HowlerGlobal = HowlerGlobal;\r\n    window.Howler = Howler;\r\n    window.Howl = Howl;\r\n    window.Sound = Sound;\r\n  }\r\n})();\r\n\r\n\r\n/*!\r\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\r\n *  \r\n *  howler.js v2.2.4\r\n *  howlerjs.com\r\n *\r\n *  (c) 2013-2020, James Simpson of GoldFire Studios\r\n *  goldfirestudios.com\r\n *\r\n *  MIT License\r\n */\r\n\r\n(function() {\r\n\r\n  'use strict';\r\n\r\n  // Setup default properties.\r\n  HowlerGlobal.prototype._pos = [0, 0, 0];\r\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\r\n\r\n  /** Global Methods **/\r\n  /***************************************************************************/\r\n\r\n  /**\r\n   * Helper method to update the stereo panning position of all current Howls.\r\n   * Future Howls will not use this value unless explicitly set.\r\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\r\n   * @return {Howler/Number}     Self or current stereo panning value.\r\n   */\r\n  HowlerGlobal.prototype.stereo = function(pan) {\r\n    var self = this;\r\n\r\n    // Stop right here if not using Web Audio.\r\n    if (!self.ctx || !self.ctx.listener) {\r\n      return self;\r\n    }\r\n\r\n    // Loop through all Howls and update their stereo panning.\r\n    for (var i=self._howls.length-1; i>=0; i--) {\r\n      self._howls[i].stereo(pan);\r\n    }\r\n\r\n    return self;\r\n  };\r\n\r\n  /**\r\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\r\n   * 3D position will be relative to the listener's position.\r\n   * @param  {Number} x The x-position of the listener.\r\n   * @param  {Number} y The y-position of the listener.\r\n   * @param  {Number} z The z-position of the listener.\r\n   * @return {Howler/Array}   Self or current listener position.\r\n   */\r\n  HowlerGlobal.prototype.pos = function(x, y, z) {\r\n    var self = this;\r\n\r\n    // Stop right here if not using Web Audio.\r\n    if (!self.ctx || !self.ctx.listener) {\r\n      return self;\r\n    }\r\n\r\n    // Set the defaults for optional 'y' & 'z'.\r\n    y = (typeof y !== 'number') ? self._pos[1] : y;\r\n    z = (typeof z !== 'number') ? self._pos[2] : z;\r\n\r\n    if (typeof x === 'number') {\r\n      self._pos = [x, y, z];\r\n\r\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\r\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\r\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\r\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\r\n      } else {\r\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\r\n      }\r\n    } else {\r\n      return self._pos;\r\n    }\r\n\r\n    return self;\r\n  };\r\n\r\n  /**\r\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\r\n   * A front and up vector must be provided. The front is the direction the\r\n   * face of the listener is pointing, and up is the direction the top of the\r\n   * listener is pointing. Thus, these values are expected to be at right angles\r\n   * from each other.\r\n   * @param  {Number} x   The x-orientation of the listener.\r\n   * @param  {Number} y   The y-orientation of the listener.\r\n   * @param  {Number} z   The z-orientation of the listener.\r\n   * @param  {Number} xUp The x-orientation of the top of the listener.\r\n   * @param  {Number} yUp The y-orientation of the top of the listener.\r\n   * @param  {Number} zUp The z-orientation of the top of the listener.\r\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\r\n   */\r\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\r\n    var self = this;\r\n\r\n    // Stop right here if not using Web Audio.\r\n    if (!self.ctx || !self.ctx.listener) {\r\n      return self;\r\n    }\r\n\r\n    // Set the defaults for optional 'y' & 'z'.\r\n    var or = self._orientation;\r\n    y = (typeof y !== 'number') ? or[1] : y;\r\n    z = (typeof z !== 'number') ? or[2] : z;\r\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\r\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\r\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\r\n\r\n    if (typeof x === 'number') {\r\n      self._orientation = [x, y, z, xUp, yUp, zUp];\r\n\r\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\r\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\r\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\r\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\r\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\r\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\r\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\r\n      } else {\r\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\r\n      }\r\n    } else {\r\n      return or;\r\n    }\r\n\r\n    return self;\r\n  };\r\n\r\n  /** Group Methods **/\r\n  /***************************************************************************/\r\n\r\n  /**\r\n   * Add new properties to the core init.\r\n   * @param  {Function} _super Core init method.\r\n   * @return {Howl}\r\n   */\r\n  Howl.prototype.init = (function(_super) {\r\n    return function(o) {\r\n      var self = this;\r\n\r\n      // Setup user-defined default properties.\r\n      self._orientation = o.orientation || [1, 0, 0];\r\n      self._stereo = o.stereo || null;\r\n      self._pos = o.pos || null;\r\n      self._pannerAttr = {\r\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\r\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\r\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\r\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\r\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\r\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\r\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\r\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\r\n      };\r\n\r\n      // Setup event listeners.\r\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\r\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\r\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\r\n\r\n      // Complete initilization with howler.js core's init function.\r\n      return _super.call(this, o);\r\n    };\r\n  })(Howl.prototype.init);\r\n\r\n  /**\r\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\r\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\r\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\r\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\r\n   */\r\n  Howl.prototype.stereo = function(pan, id) {\r\n    var self = this;\r\n\r\n    // Stop right here if not using Web Audio.\r\n    if (!self._webAudio) {\r\n      return self;\r\n    }\r\n\r\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\r\n    if (self._state !== 'loaded') {\r\n      self._queue.push({\r\n        event: 'stereo',\r\n        action: function() {\r\n          self.stereo(pan, id);\r\n        }\r\n      });\r\n\r\n      return self;\r\n    }\r\n\r\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\r\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\r\n\r\n    // Setup the group's stereo panning if no ID is passed.\r\n    if (typeof id === 'undefined') {\r\n      // Return the group's stereo panning if no parameters are passed.\r\n      if (typeof pan === 'number') {\r\n        self._stereo = pan;\r\n        self._pos = [pan, 0, 0];\r\n      } else {\r\n        return self._stereo;\r\n      }\r\n    }\r\n\r\n    // Change the streo panning of one or all sounds in group.\r\n    var ids = self._getSoundIds(id);\r\n    for (var i=0; i<ids.length; i++) {\r\n      // Get the sound.\r\n      var sound = self._soundById(ids[i]);\r\n\r\n      if (sound) {\r\n        if (typeof pan === 'number') {\r\n          sound._stereo = pan;\r\n          sound._pos = [pan, 0, 0];\r\n\r\n          if (sound._node) {\r\n            // If we are falling back, make sure the panningModel is equalpower.\r\n            sound._pannerAttr.panningModel = 'equalpower';\r\n\r\n            // Check if there is a panner setup and create a new one if not.\r\n            if (!sound._panner || !sound._panner.pan) {\r\n              setupPanner(sound, pannerType);\r\n            }\r\n\r\n            if (pannerType === 'spatial') {\r\n              if (typeof sound._panner.positionX !== 'undefined') {\r\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\r\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\r\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\r\n              } else {\r\n                sound._panner.setPosition(pan, 0, 0);\r\n              }\r\n            } else {\r\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\r\n            }\r\n          }\r\n\r\n          self._emit('stereo', sound._id);\r\n        } else {\r\n          return sound._stereo;\r\n        }\r\n      }\r\n    }\r\n\r\n    return self;\r\n  };\r\n\r\n  /**\r\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\r\n   * @param  {Number} x  The x-position of the audio source.\r\n   * @param  {Number} y  The y-position of the audio source.\r\n   * @param  {Number} z  The z-position of the audio source.\r\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\r\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\r\n   */\r\n  Howl.prototype.pos = function(x, y, z, id) {\r\n    var self = this;\r\n\r\n    // Stop right here if not using Web Audio.\r\n    if (!self._webAudio) {\r\n      return self;\r\n    }\r\n\r\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\r\n    if (self._state !== 'loaded') {\r\n      self._queue.push({\r\n        event: 'pos',\r\n        action: function() {\r\n          self.pos(x, y, z, id);\r\n        }\r\n      });\r\n\r\n      return self;\r\n    }\r\n\r\n    // Set the defaults for optional 'y' & 'z'.\r\n    y = (typeof y !== 'number') ? 0 : y;\r\n    z = (typeof z !== 'number') ? -0.5 : z;\r\n\r\n    // Setup the group's spatial position if no ID is passed.\r\n    if (typeof id === 'undefined') {\r\n      // Return the group's spatial position if no parameters are passed.\r\n      if (typeof x === 'number') {\r\n        self._pos = [x, y, z];\r\n      } else {\r\n        return self._pos;\r\n      }\r\n    }\r\n\r\n    // Change the spatial position of one or all sounds in group.\r\n    var ids = self._getSoundIds(id);\r\n    for (var i=0; i<ids.length; i++) {\r\n      // Get the sound.\r\n      var sound = self._soundById(ids[i]);\r\n\r\n      if (sound) {\r\n        if (typeof x === 'number') {\r\n          sound._pos = [x, y, z];\r\n\r\n          if (sound._node) {\r\n            // Check if there is a panner setup and create a new one if not.\r\n            if (!sound._panner || sound._panner.pan) {\r\n              setupPanner(sound, 'spatial');\r\n            }\r\n\r\n            if (typeof sound._panner.positionX !== 'undefined') {\r\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\r\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\r\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\r\n            } else {\r\n              sound._panner.setPosition(x, y, z);\r\n            }\r\n          }\r\n\r\n          self._emit('pos', sound._id);\r\n        } else {\r\n          return sound._pos;\r\n        }\r\n      }\r\n    }\r\n\r\n    return self;\r\n  };\r\n\r\n  /**\r\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\r\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\r\n   * a sound pointing away from the listener can be quiet or silent.\r\n   * @param  {Number} x  The x-orientation of the source.\r\n   * @param  {Number} y  The y-orientation of the source.\r\n   * @param  {Number} z  The z-orientation of the source.\r\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\r\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\r\n   */\r\n  Howl.prototype.orientation = function(x, y, z, id) {\r\n    var self = this;\r\n\r\n    // Stop right here if not using Web Audio.\r\n    if (!self._webAudio) {\r\n      return self;\r\n    }\r\n\r\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\r\n    if (self._state !== 'loaded') {\r\n      self._queue.push({\r\n        event: 'orientation',\r\n        action: function() {\r\n          self.orientation(x, y, z, id);\r\n        }\r\n      });\r\n\r\n      return self;\r\n    }\r\n\r\n    // Set the defaults for optional 'y' & 'z'.\r\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\r\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\r\n\r\n    // Setup the group's spatial orientation if no ID is passed.\r\n    if (typeof id === 'undefined') {\r\n      // Return the group's spatial orientation if no parameters are passed.\r\n      if (typeof x === 'number') {\r\n        self._orientation = [x, y, z];\r\n      } else {\r\n        return self._orientation;\r\n      }\r\n    }\r\n\r\n    // Change the spatial orientation of one or all sounds in group.\r\n    var ids = self._getSoundIds(id);\r\n    for (var i=0; i<ids.length; i++) {\r\n      // Get the sound.\r\n      var sound = self._soundById(ids[i]);\r\n\r\n      if (sound) {\r\n        if (typeof x === 'number') {\r\n          sound._orientation = [x, y, z];\r\n\r\n          if (sound._node) {\r\n            // Check if there is a panner setup and create a new one if not.\r\n            if (!sound._panner) {\r\n              // Make sure we have a position to setup the node with.\r\n              if (!sound._pos) {\r\n                sound._pos = self._pos || [0, 0, -0.5];\r\n              }\r\n\r\n              setupPanner(sound, 'spatial');\r\n            }\r\n\r\n            if (typeof sound._panner.orientationX !== 'undefined') {\r\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\r\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\r\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\r\n            } else {\r\n              sound._panner.setOrientation(x, y, z);\r\n            }\r\n          }\r\n\r\n          self._emit('orientation', sound._id);\r\n        } else {\r\n          return sound._orientation;\r\n        }\r\n      }\r\n    }\r\n\r\n    return self;\r\n  };\r\n\r\n  /**\r\n   * Get/set the panner node's attributes for a sound or group of sounds.\r\n   * This method can optionall take 0, 1 or 2 arguments.\r\n   *   pannerAttr() -> Returns the group's values.\r\n   *   pannerAttr(id) -> Returns the sound id's values.\r\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\r\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\r\n   *\r\n   *   Attributes:\r\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\r\n   *                      inside of which there will be no volume reduction.\r\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\r\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\r\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\r\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\r\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\r\n   *                     listener. Can be `linear`, `inverse` or `exponential.\r\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\r\n   *                   will not be reduced any further.\r\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\r\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\r\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\r\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\r\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, \u221E]`\r\n   *                     with `inverse` and `exponential`.\r\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\r\n   *                     Can be `HRTF` or `equalpower`.\r\n   *\r\n   * @return {Howl/Object} Returns self or current panner attributes.\r\n   */\r\n  Howl.prototype.pannerAttr = function() {\r\n    var self = this;\r\n    var args = arguments;\r\n    var o, id, sound;\r\n\r\n    // Stop right here if not using Web Audio.\r\n    if (!self._webAudio) {\r\n      return self;\r\n    }\r\n\r\n    // Determine the values based on arguments.\r\n    if (args.length === 0) {\r\n      // Return the group's panner attribute values.\r\n      return self._pannerAttr;\r\n    } else if (args.length === 1) {\r\n      if (typeof args[0] === 'object') {\r\n        o = args[0];\r\n\r\n        // Set the grou's panner attribute values.\r\n        if (typeof id === 'undefined') {\r\n          if (!o.pannerAttr) {\r\n            o.pannerAttr = {\r\n              coneInnerAngle: o.coneInnerAngle,\r\n              coneOuterAngle: o.coneOuterAngle,\r\n              coneOuterGain: o.coneOuterGain,\r\n              distanceModel: o.distanceModel,\r\n              maxDistance: o.maxDistance,\r\n              refDistance: o.refDistance,\r\n              rolloffFactor: o.rolloffFactor,\r\n              panningModel: o.panningModel\r\n            };\r\n          }\r\n\r\n          self._pannerAttr = {\r\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\r\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\r\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\r\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\r\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\r\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\r\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\r\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\r\n          };\r\n        }\r\n      } else {\r\n        // Return this sound's panner attribute values.\r\n        sound = self._soundById(parseInt(args[0], 10));\r\n        return sound ? sound._pannerAttr : self._pannerAttr;\r\n      }\r\n    } else if (args.length === 2) {\r\n      o = args[0];\r\n      id = parseInt(args[1], 10);\r\n    }\r\n\r\n    // Update the values of the specified sounds.\r\n    var ids = self._getSoundIds(id);\r\n    for (var i=0; i<ids.length; i++) {\r\n      sound = self._soundById(ids[i]);\r\n\r\n      if (sound) {\r\n        // Merge the new values into the sound.\r\n        var pa = sound._pannerAttr;\r\n        pa = {\r\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\r\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\r\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\r\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\r\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\r\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\r\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\r\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\r\n        };\r\n\r\n        // Create a new panner node if one doesn't already exist.\r\n        var panner = sound._panner;\r\n        if (!panner) {\r\n          // Make sure we have a position to setup the node with.\r\n          if (!sound._pos) {\r\n            sound._pos = self._pos || [0, 0, -0.5];\r\n          }\r\n\r\n          // Create a new panner node.\r\n          setupPanner(sound, 'spatial');\r\n          panner = sound._panner\r\n        }\r\n\r\n        // Update the panner values or create a new panner if none exists.\r\n        panner.coneInnerAngle = pa.coneInnerAngle;\r\n        panner.coneOuterAngle = pa.coneOuterAngle;\r\n        panner.coneOuterGain = pa.coneOuterGain;\r\n        panner.distanceModel = pa.distanceModel;\r\n        panner.maxDistance = pa.maxDistance;\r\n        panner.refDistance = pa.refDistance;\r\n        panner.rolloffFactor = pa.rolloffFactor;\r\n        panner.panningModel = pa.panningModel;\r\n      }\r\n    }\r\n\r\n    return self;\r\n  };\r\n\r\n  /** Single Sound Methods **/\r\n  /***************************************************************************/\r\n\r\n  /**\r\n   * Add new properties to the core Sound init.\r\n   * @param  {Function} _super Core Sound init method.\r\n   * @return {Sound}\r\n   */\r\n  Sound.prototype.init = (function(_super) {\r\n    return function() {\r\n      var self = this;\r\n      var parent = self._parent;\r\n\r\n      // Setup user-defined default properties.\r\n      self._orientation = parent._orientation;\r\n      self._stereo = parent._stereo;\r\n      self._pos = parent._pos;\r\n      self._pannerAttr = parent._pannerAttr;\r\n\r\n      // Complete initilization with howler.js core Sound's init function.\r\n      _super.call(this);\r\n\r\n      // If a stereo or position was specified, set it up.\r\n      if (self._stereo) {\r\n        parent.stereo(self._stereo);\r\n      } else if (self._pos) {\r\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\r\n      }\r\n    };\r\n  })(Sound.prototype.init);\r\n\r\n  /**\r\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\r\n   * @param  {Function} _super Sound reset method.\r\n   * @return {Sound}\r\n   */\r\n  Sound.prototype.reset = (function(_super) {\r\n    return function() {\r\n      var self = this;\r\n      var parent = self._parent;\r\n\r\n      // Reset all spatial plugin properties on this sound.\r\n      self._orientation = parent._orientation;\r\n      self._stereo = parent._stereo;\r\n      self._pos = parent._pos;\r\n      self._pannerAttr = parent._pannerAttr;\r\n\r\n      // If a stereo or position was specified, set it up.\r\n      if (self._stereo) {\r\n        parent.stereo(self._stereo);\r\n      } else if (self._pos) {\r\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\r\n      } else if (self._panner) {\r\n        // Disconnect the panner.\r\n        self._panner.disconnect(0);\r\n        self._panner = undefined;\r\n        parent._refreshBuffer(self);\r\n      }\r\n\r\n      // Complete resetting of the sound.\r\n      return _super.call(this);\r\n    };\r\n  })(Sound.prototype.reset);\r\n\r\n  /** Helper Methods **/\r\n  /***************************************************************************/\r\n\r\n  /**\r\n   * Create a new panner node and save it on the sound.\r\n   * @param  {Sound} sound Specific sound to setup panning on.\r\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\r\n   */\r\n  var setupPanner = function(sound, type) {\r\n    type = type || 'spatial';\r\n\r\n    // Create the new panner node.\r\n    if (type === 'spatial') {\r\n      sound._panner = Howler.ctx.createPanner();\r\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\r\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\r\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\r\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\r\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\r\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\r\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\r\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\r\n\r\n      if (typeof sound._panner.positionX !== 'undefined') {\r\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\r\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\r\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\r\n      } else {\r\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\r\n      }\r\n\r\n      if (typeof sound._panner.orientationX !== 'undefined') {\r\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\r\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\r\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\r\n      } else {\r\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\r\n      }\r\n    } else {\r\n      sound._panner = Howler.ctx.createStereoPanner();\r\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\r\n    }\r\n\r\n    sound._panner.connect(sound._node);\r\n\r\n    // Update the connections.\r\n    if (!sound._paused) {\r\n      sound._parent.pause(sound._id, true).play(sound._id, true);\r\n    }\r\n  };\r\n})();\r\n"],
  "mappings": "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",
  "names": ["HowlerGlobal", "Howler", "e", "i", "Howl", "Sound"]
}
