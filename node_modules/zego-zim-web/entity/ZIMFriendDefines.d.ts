import { ZIMErrorUserInfo, ZIMPushConfig, ZIMUserInfo } from './ZIMDefines';
export declare enum ZIMBlacklistChangeAction {
    Added = 0,
    Removed = 1
}
export declare enum ZIMUserRelationType {
    /** 单向校验 - A 的好友表中没有 B，但无法确定 B 的好友表中是否有 A  */
    SingleNo = 1,
    /** 单向校验 - A 的好友表中有 B，但无法确定 B 的好友表中是否有 A  */
    SingleHave = 2,
    /** 双向校验 - A 的好友表中没有 B，B 的好友表中也没有 A */
    BothAllNo = 3,
    /** 双向校验 - A 的好友表中有 B，但 B 的好友表中没有 A */
    BothSelfHave = 4,
    /** 双向校验 - A 的好友表中没有 B，但 B 的好友表中有 A */
    BothOtherHave = 5,
    /** 双向校验 - A 的好友表中有 B，B 的好友表中也有 A */
    BothAllHave = 6
}
export declare enum ZIMFriendRelationCheckType {
    Both = 0,
    Single = 1
}
export declare enum ZIMFriendDeleteType {
    Both = 0,
    Single = 1
}
export declare enum ZIMFriendListChangeAction {
    Added = 0,
    Deleted = 1
}
export declare enum ZIMFriendApplicationType {
    None = 0,
    Received = 1,
    Sent = 2,
    Both = 3
}
export declare enum ZIMFriendApplicationState {
    Waiting = 1,
    Accepted = 2,
    Rejected = 3,
    Expired = 4,
    Disabled = 5
}
export declare enum ZIMFriendApplicationListChangeAction {
    Added = 0
}
export interface ZIMFriendInfo extends ZIMUserInfo {
    wording: string;
    friendAlias: string;
    friendAttributes: Record<string, string>;
    createTime: number;
    seq: number;
}
export interface ZIMFriendApplicationInfo {
    applyUser: ZIMUserInfo;
    wording: string;
    createTime: number;
    updateTime: number;
    type: ZIMFriendApplicationType;
    state: ZIMFriendApplicationState;
}
export interface ZIMFriendAddConfig {
    wording: string;
    friendAlias: string;
    friendAttributes: Record<string, string>;
}
export interface ZIMFriendAddedResult {
    friendInfo: ZIMFriendInfo;
}
export interface ZIMFriendApplicationSendConfig {
    wording: string;
    friendAlias: string;
    friendAttributes: Record<string, string>;
    pushConfig?: ZIMPushConfig;
}
export interface ZIMFriendApplicationSentResult {
    applicationInfo: ZIMFriendApplicationInfo;
}
export interface ZIMFriendDeleteConfig {
    type: ZIMFriendDeleteType;
}
export interface ZIMFriendsDeletedResult {
    errorUserList: ZIMErrorUserInfo[];
}
export interface ZIMFriendRelationCheckConfig {
    type: ZIMFriendRelationCheckType;
}
export interface ZIMFriendRelationInfo {
    userID: string;
    type: ZIMUserRelationType;
}
export interface ZIMFriendsRelationCheckedResult {
    relationInfos: ZIMFriendRelationInfo[];
    errorUserList: ZIMErrorUserInfo[];
}
export interface ZIMFriendAliasUpdatedResult {
    friendInfo: ZIMFriendInfo;
}
export interface ZIMFriendAttributesUpdatedResult {
    friendInfo: ZIMFriendInfo;
}
export interface ZIMFriendApplicationAcceptConfig {
    friendAlias: string;
    friendAttributes: Record<string, string>;
    pushConfig?: ZIMPushConfig;
}
export interface ZIMFriendApplicationAcceptedResult {
    friendInfo: ZIMFriendInfo;
}
export interface ZIMFriendApplicationRejectConfig {
    pushConfig?: ZIMPushConfig;
}
export interface ZIMFriendApplicationRejectedResult {
    userInfo: ZIMUserInfo;
}
export interface ZIMFriendListQueryConfig {
    count: number;
    nextFlag?: number;
}
export interface ZIMFriendsInfoQueriedResult {
    friendInfos: ZIMFriendInfo[];
    errorUserList: ZIMErrorUserInfo[];
}
export interface ZIMFriendListQueriedResult {
    nextFlag: number;
    friendList: ZIMFriendInfo[];
}
export interface ZIMFriendApplicationListQueryConfig {
    count: number;
    nextFlag?: number;
}
export interface ZIMFriendApplicationListQueriedResult {
    nextFlag: number;
    applicationList: ZIMFriendApplicationInfo[];
}
export interface ZIMFriendSearchConfig {
    keywords: string[];
    isAlsoMatchFriendAlias: boolean;
    count: number;
    nextFlag: number;
}
export interface ZIMFriendsSearchedResult {
    nextFlag: number;
    friendInfoList: ZIMFriendInfo[];
}
export interface ZIMBlacklistUsersAddedResult {
    errorUserList: ZIMErrorUserInfo[];
}
export interface ZIMBlacklistUsersRemovedResult {
    errorUserList: ZIMErrorUserInfo[];
}
export interface ZIMBlacklistQueryConfig {
    count: number;
    nextFlag?: number;
}
export interface ZIMBlacklistQueriedResult {
    nextFlag: number;
    blacklist: ZIMUserInfo[];
}
export interface ZIMBlacklistCheckedResult {
    isUserInBlacklist: boolean;
}
